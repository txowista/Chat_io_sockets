#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('chat_example:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

var usersOnline = {};

var io = require("socket.io").listen(server);

io.sockets.on('connection', function(socket)
{

  socket.on("loginUser", function(username)
  {
    if(usersOnline[username])
    {
      socket.emit("userInUse");
      return;
    }
    socket.username = username;
    usersOnline[username] = socket.username;
    socket.emit("refreshChat", "I", "welcome " + socket.username + ", you have connected");
    socket.broadcast.emit("refreshChat", "connect", "The user: " + socket.username + " connected");
    io.sockets.emit("updateSidebarUsers", usersOnline);
  });

  socket.on('addNewMessage', function(message)
  {
    socket.emit("refreshChat", "msg", "I : " + message + ".");
    socket.broadcast.emit("refreshChat", "msg", socket.username + " said: " + message + ".");
  });

  socket.on("disconnect", function()
  {

    if(typeof(socket.username) == "undefined")
    {
      return;
    }
    delete usersOnline[socket.username];
    io.sockets.emit("updateSidebarUsers", usersOnline);
    socket.broadcast.emit("refreshChat", "disconnect", "El usuario " + socket.username + " se ha desconectado del chat.");
  });
});
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
